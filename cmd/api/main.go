package main

import (
	"fmt"
	"log"

	"github.com/gin-gonic/gin"
	"github.com/joho/godotenv"
	"github.com/spf13/viper"

	_ "github.com/gjovanovicst/auth_api/docs" // docs is generated by Swag CLI
	"github.com/gjovanovicst/auth_api/internal/database"
	"github.com/gjovanovicst/auth_api/internal/email"
	logService "github.com/gjovanovicst/auth_api/internal/log"
	"github.com/gjovanovicst/auth_api/internal/middleware"
	"github.com/gjovanovicst/auth_api/internal/redis"
	"github.com/gjovanovicst/auth_api/internal/social"
	"github.com/gjovanovicst/auth_api/internal/twofa"
	"github.com/gjovanovicst/auth_api/internal/user"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

// @title           Authentication and Authorization API
// @version         1.0
// @description     This is a sample authentication and authorization API built with Go and Gin.
// @termsOfService  http://swagger.io/terms/

// @contact.name   API Support
// @contact.url    http://www.swagger.io/support
// @contact.email  support@swagger.io

// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html

// @host      localhost:8080
// @BasePath  /

// @securityDefinitions.apikey ApiKeyAuth
// @in header
// @name Authorization
// @description Type "Bearer" + your JWT token

func main() {
	// Load environment variables from .env file
	if err := godotenv.Load(); err != nil {
		log.Println("No .env file found, relying on environment variables")
	}

	// Initialize Viper for configuration management
	viper.AutomaticEnv() // Read environment variables
	viper.SetDefault("PORT", "8080")
	viper.SetDefault("ACCESS_TOKEN_EXPIRATION_MINUTES", 15)
	viper.SetDefault("REFRESH_TOKEN_EXPIRATION_HOURS", 720)

	// Connect to database
	database.ConnectDatabase()

	// Connect to Redis
	redis.ConnectRedis()

	// Run database migrations
	database.MigrateDatabase()

	// Initialize Activity Log Service
	logService.InitializeLogService()

	// Initialize Services and Handlers
	userRepo := user.NewRepository(database.DB)
	socialRepo := social.NewRepository(database.DB)
	logRepo := logService.NewRepository(database.DB)
	emailService := email.NewService()
	userService := user.NewService(userRepo, emailService)
	socialService := social.NewService(userRepo, socialRepo)
	twofaService := twofa.NewService(userRepo)
	logQueryService := logService.NewQueryService(logRepo)
	userHandler := user.NewHandler(userService)
	socialHandler := social.NewHandler(socialService)
	twofaHandler := twofa.NewHandler(twofaService)
	logHandler := logService.NewHandler(logQueryService)

	// Setup Gin Router
	r := gin.Default()

	// Public routes
	public := r.Group("/")
	{
		public.POST("/register", userHandler.Register)
		public.POST("/login", userHandler.Login)
		public.POST("/refresh-token", userHandler.RefreshToken)
		public.POST("/forgot-password", userHandler.ForgotPassword)
		public.POST("/reset-password", userHandler.ResetPassword)
		public.GET("/verify-email", userHandler.VerifyEmail)
		// 2FA login verification (public because it needs temp token)
		public.POST("/2fa/login-verify", twofaHandler.VerifyLogin)
	}

	// Social authentication routes
	auth := r.Group("/auth")
	{
		// Google OAuth2
		auth.GET("/google/login", socialHandler.GoogleLogin)
		auth.GET("/google/callback", socialHandler.GoogleCallback)

		// Facebook OAuth2
		auth.GET("/facebook/login", socialHandler.FacebookLogin)
		auth.GET("/facebook/callback", socialHandler.FacebookCallback)

		// GitHub OAuth2
		auth.GET("/github/login", socialHandler.GithubLogin)
		auth.GET("/github/callback", socialHandler.GithubCallback)
	}

	// Protected routes (require JWT authentication)
	protected := r.Group("/")
	protected.Use(middleware.AuthMiddleware())
	{
		protected.GET("/profile", userHandler.GetProfile)
		protected.POST("/logout", userHandler.Logout)

		// 2FA management routes
		protected.POST("/2fa/generate", twofaHandler.Generate2FA)
		protected.POST("/2fa/verify-setup", twofaHandler.VerifySetup)
		protected.POST("/2fa/enable", twofaHandler.Enable2FA)
		protected.POST("/2fa/disable", twofaHandler.Disable2FA)
		protected.POST("/2fa/recovery-codes", twofaHandler.GenerateRecoveryCodes)

		// Activity log routes
		protected.GET("/activity-logs", logHandler.GetUserActivityLogs)
		protected.GET("/activity-logs/event-types", logHandler.GetEventTypes)
		protected.GET("/activity-logs/:id", logHandler.GetActivityLogByID)
	}

	// Admin routes (for future role-based access control)
	admin := r.Group("/admin")
	admin.Use(middleware.AuthMiddleware())
	// TODO: Add admin role check middleware
	{
		admin.GET("/activity-logs", logHandler.GetAllActivityLogs)
	}

	// Add Swagger UI endpoint
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Start the server
	port := viper.GetString("PORT")
	log.Printf("Server starting on port %s", port)
	if err := r.Run(fmt.Sprintf(":%s", port)); err != nil {
		log.Fatalf("Server failed to start: %v", err)
	}
}
