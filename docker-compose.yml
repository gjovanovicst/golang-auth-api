version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth_db
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
      - shared-api-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: auth_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - default
      - shared-api-network

  # Redis Commander - Web UI for Redis Management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis_commander
    hostname: redis-commander
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - default

  # Go Auth API Application
  auth-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth_api
    ports:
      - "8080:8080"
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - default
      - shared-api-network

volumes:
  postgres_data:
  redis_data:

networks:
  shared-api-network:
    external: true
