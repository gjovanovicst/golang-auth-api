basePath: /
definitions:
  dto.ActivityLogListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.ActivityLogResponse'
        type: array
      pagination:
        $ref: '#/definitions/dto.PaginationResponse'
    type: object
  dto.ActivityLogResponse:
    properties:
      details:
        type: object
      event_type:
        type: string
      id:
        type: string
      ip_address:
        type: string
      timestamp:
        type: string
      user_agent:
        type: string
      user_id:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  dto.LogoutRequest:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    required:
    - access_token
    - refresh_token
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    type: object
  dto.PaginationResponse:
    properties:
      has_next:
        type: boolean
      has_previous:
        type: boolean
      limit:
        type: integer
      page:
        type: integer
      total_pages:
        type: integer
      total_records:
        type: integer
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.ResetPasswordRequest:
    properties:
      new_password:
        minLength: 8
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  dto.TwoFADisableRequest:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  dto.TwoFAEnableResponse:
    properties:
      message:
        type: string
      recovery_codes:
        items:
          type: string
        type: array
    type: object
  dto.TwoFALoginRequest:
    properties:
      code:
        type: string
      recovery_code:
        type: string
      temp_token:
        type: string
    required:
    - temp_token
    type: object
  dto.TwoFARecoveryCodesResponse:
    properties:
      message:
        type: string
      recovery_codes:
        items:
          type: string
        type: array
    type: object
  dto.TwoFARequiredResponse:
    properties:
      message:
        type: string
      temp_token:
        type: string
    type: object
  dto.TwoFAVerifyRequest:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      email_verified:
        type: boolean
      id:
        type: string
      two_fa_enabled:
        type: boolean
      updated_at:
        type: string
    type: object
  twofa.TwoFASetupResponse:
    properties:
      qr_code_data:
        items:
          type: integer
        type: array
      qr_code_url:
        type: string
      secret:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample authentication and authorization API built with Go
    and Gin.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Authentication and Authorization API
  version: "1.0"
paths:
  /2fa/disable:
    post:
      consumes:
      - application/json
      description: Disable 2FA for the user (requires password and/or TOTP code)
      parameters:
      - description: Disable 2FA Data
        in: body
        name: disable
        required: true
        schema:
          $ref: '#/definitions/dto.TwoFADisableRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Disable 2FA
      tags:
      - 2FA
  /2fa/enable:
    post:
      description: Enable 2FA for the user after successful verification
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TwoFAEnableResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Enable 2FA
      tags:
      - 2FA
  /2fa/generate:
    post:
      description: Generate a 2FA secret and QR code for user setup
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/twofa.TwoFASetupResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Generate 2FA setup
      tags:
      - 2FA
  /2fa/login-verify:
    post:
      consumes:
      - application/json
      description: Verify the TOTP code during the 2FA login process
      parameters:
      - description: 2FA Login Data
        in: body
        name: verify
        required: true
        schema:
          $ref: '#/definitions/dto.TwoFALoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Verify 2FA during login
      tags:
      - 2FA
  /2fa/recovery-codes:
    post:
      consumes:
      - application/json
      description: Generate and display new recovery codes (requires password and/or
        TOTP code)
      parameters:
      - description: TOTP Code
        in: body
        name: verify
        required: true
        schema:
          $ref: '#/definitions/dto.TwoFAVerifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TwoFARecoveryCodesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Generate new recovery codes
      tags:
      - 2FA
  /2fa/verify-setup:
    post:
      consumes:
      - application/json
      description: Verify the initial 2FA setup with a TOTP code
      parameters:
      - description: TOTP Code
        in: body
        name: setup
        required: true
        schema:
          $ref: '#/definitions/dto.TwoFAVerifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Verify 2FA setup
      tags:
      - 2FA
  /activity-logs:
    get:
      description: Retrieve the authenticated user's activity logs with pagination
        and filtering
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: Filter by event type
        in: query
        name: event_type
        type: string
      - description: Start date filter (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date filter (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ActivityLogListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user activity logs
      tags:
      - Activity Logs
  /activity-logs/{id}:
    get:
      description: Retrieve a specific activity log by ID (users can only access their
        own logs)
      parameters:
      - description: Activity Log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ActivityLogResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get activity log by ID
      tags:
      - Activity Logs
  /activity-logs/event-types:
    get:
      description: Retrieve list of available activity log event types for filtering
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              items:
                type: string
              type: array
            type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get available event types
      tags:
      - Activity Logs
  /admin/activity-logs:
    get:
      description: Retrieve all users' activity logs with pagination and filtering
        (admin access required)
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        minimum: 1
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: Filter by event type
        in: query
        name: event_type
        type: string
      - description: Start date filter (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End date filter (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ActivityLogListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get all activity logs (Admin)
      tags:
      - Activity Logs
  /auth/facebook/callback:
    get:
      description: Handles Facebook OAuth2 callback and returns JWT tokens
      parameters:
      - description: State token
        in: query
        name: state
        required: true
        type: string
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Facebook OAuth2 Callback
      tags:
      - social
  /auth/facebook/login:
    get:
      description: Redirects user to Facebook OAuth2 login page
      produces:
      - application/json
      responses:
        "307":
          description: Redirect
          schema:
            type: string
      summary: Facebook OAuth2 Login
      tags:
      - social
  /auth/github/callback:
    get:
      description: Handles GitHub OAuth2 callback and returns JWT tokens
      parameters:
      - description: State token
        in: query
        name: state
        required: true
        type: string
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: GitHub OAuth2 Callback
      tags:
      - social
  /auth/github/login:
    get:
      description: Redirects user to GitHub OAuth2 login page
      produces:
      - application/json
      responses:
        "307":
          description: Redirect
          schema:
            type: string
      summary: GitHub OAuth2 Login
      tags:
      - social
  /auth/google/callback:
    get:
      description: Handles Google OAuth2 callback and returns JWT tokens
      parameters:
      - description: State token
        in: query
        name: state
        required: true
        type: string
      - description: Authorization code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Google OAuth2 Callback
      tags:
      - social
  /auth/google/login:
    get:
      description: Redirects user to Google OAuth2 login page
      produces:
      - application/json
      responses:
        "307":
          description: Redirect
          schema:
            type: string
      summary: Google OAuth2 Login
      tags:
      - social
  /forgot-password:
    post:
      consumes:
      - application/json
      description: Initiate password reset process
      parameters:
      - description: User Email
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Request password reset
      tags:
      - Auth
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user and issue JWTs
      parameters:
      - description: User Login Data
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/dto.TwoFARequiredResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: User login
      tags:
      - Auth
  /logout:
    post:
      consumes:
      - application/json
      description: Logout user and revoke refresh token
      parameters:
      - description: Logout Data
        in: body
        name: logout
        required: true
        schema:
          $ref: '#/definitions/dto.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: User logout
      tags:
      - Auth
  /profile:
    get:
      description: Retrieve authenticated user's profile information
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - User
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Get new access token using refresh token
      parameters:
      - description: Refresh Token
        in: body
        name: refresh
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Refresh access token
      tags:
      - Auth
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User Registration Data
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register a new user
      tags:
      - Auth
  /reset-password:
    post:
      consumes:
      - application/json
      description: Complete password reset process
      parameters:
      - description: Reset Token and New Password
        in: body
        name: reset
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Reset password
      tags:
      - Auth
  /verify-email:
    get:
      description: Verify user's email address
      parameters:
      - description: Verification Token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Verify email
      tags:
      - Auth
securityDefinitions:
  ApiKeyAuth:
    description: Type "Bearer" + your JWT token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
